import React, { useEffect, useState } from 'react';
import axios from 'axios';
import Spinner from '../components/Spinner';
import { Link } from 'react-router-dom';
import { AiOutlineEdit } from 'react-icons/ai';
import { BsInfoCircle } from 'react-icons/bs';
import { MdOutlineAddBox, MdOutlineDelete } from 'react-icons/md';
import jsPDF from 'jspdf';
import 'jspdf-autotable';

const PaymentDashboard = () => {
  const [payments, setPayments] = useState([]);
  const [searchQuery, setSearchQuery] = useState('');
  const [filteredPayments, setFilteredPayments] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    setLoading(true);
    axios
      .get('http://localhost:5555/payments')
      .then((response) => {
        setPayments(response.data.data);
        setFilteredPayments(response.data.data); // Initialize filteredPayments with all payments
        setLoading(false);
      })
      .catch((error) => {
        console.log(error);
        setLoading(false);
      });
  }, []);

  // Handle search button click
  const handleSearch = () => {
    const results = payments.filter((payment) =>
      payment.productName.toLowerCase().includes(searchQuery.toLowerCase()) ||
      payment.cardHolderName.toLowerCase().includes(searchQuery.toLowerCase())
    );
    setFilteredPayments(results);
  };

  // Calculate the total price
  const totalPrice = filteredPayments.reduce((total, payment) => total + payment.totalPrice, 0);

  // Generate PDF report
  const generatePDF = () => {
    const doc = new jsPDF();
  
    // Add Business Name
    doc.setFontSize(24);
    doc.setFont('Poppins', 'bold');
    doc.text('CraftMart', 14, 22);
  
    // Add Report Title
    doc.setFontSize(18);
    doc.setFont('Poppins', 'bold');
    doc.text('Payment Report', 14, 32);
  
    // Add Report Generation Date
    const reportDate = new Date().toLocaleDateString();
    doc.setFontSize(12);
    doc.setFont('Poppins', 'normal');
    doc.text(`Date: ${reportDate}`, 14, 42);
  
    // Add a line break before the table
    doc.setDrawColor(0, 0, 0);
    doc.setLineWidth(1);
    doc.line(10, 45, 205, 45);
  
    // Table Column and Rows
    const tableColumn = ["No", "Invoice ID", "Customer", "Product Name", "Price", "Quantity", "Total Price"];
    const tableRows = filteredPayments.map((payment, index) => [
      `PID_${index + 1}`,
      payment._id,
   // payment.paymentID,
      payment.cardHolderName,
      payment.productName,
      `Rs ${payment.price.toFixed(2)}`,
      payment.quantity,
      `Rs ${payment.totalPrice.toFixed(2)}`
    ]);
  
    // Generate Table
    doc.autoTable(tableColumn, tableRows, {
      startY: 50,
      theme: 'grid',
      headStyles: {
        fillColor: '#330D0F',
        textColor: '#FFFFFF',
        font: 'Poppins',
        fontSize: 8,
        halign: 'center',
      },
      bodyStyles: {
        font: 'Poppins',
        fontSize: 10,
      },
      margin: { left: 10, right: 14 },
      columnStyles: {
        0: { cellWidth: 15, halign: 'center' },  // Center-aligned
        1: { cellWidth: 50, halign: 'center' }, // Center-aligned
        2: { cellWidth: 30, halign: 'right' },  // Right-aligned
        3: { cellWidth: 30, halign: 'right' },  // Right-aligned
        4: { cellWidth: 30, halign: 'right' },  // Right-aligned
        5: { cellWidth: 15, halign: 'right' },  // Right-aligned
        6: { cellWidth: 25, halign: 'right' },  // Right-aligned
      },
      styles: {
        cellPadding: 2,
        
      },
      didDrawPage: function (data) {
        // Add footer text
        doc.setFontSize(10);
        doc.text('Generated by Craftmart', 14, doc.internal.pageSize.height - 10);
      },
    });
  
    // Add Total Price
    const totalPrice = filteredPayments.reduce((acc, payment) => acc + parseFloat(payment.totalPrice), 0).toFixed(2);
    const totalPriceY = doc.autoTable.previous.finalY + 10;
    doc.setFontSize(14);
    doc.setFont('Poppins', 'bold');
    doc.text(`Total Income : Rs ${totalPrice}`, 14, totalPriceY);
  
    // Save PDF
    doc.save('payment-report.pdf');
  };
  
  

  return (
    <div style={styles.page}>
      <div style={styles.container}>
        <div style={styles.header}>
          <h1 style={styles.title}>Payment Management</h1>
          <Link to='/payments/create'>
            <MdOutlineAddBox style={{ ...styles.addIcon, color: '#0284c7' }} /> {/* text-sky-800 */}
          </Link>
        </div>

        <div style={styles.searchContainer}>
          <input
            type="text"
            placeholder="Search by Product Name or Card Holder Name"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            style={styles.searchInput}
          />
          <button onClick={handleSearch} style={styles.searchButton}>Search</button>
        </div>

        {loading ? (
          <Spinner />
        ) : (
          <>
            {filteredPayments.length > 0 ? (
              <>
               <button
                  className="btn btn-primary"
                  onClick={generatePDF}
                  style={{ ...styles.downloadButton, ...styles.downloadButtonHover }}
                >
                  Download Payment Report
               </button>
                <table style={styles.table}>
                  <thead>
                    <tr>
                      <th style={{...styles.th, ...styles.columnWidths.no }}>Payment ID</th>
                      <th style={{ ...styles.th, ...styles.columnWidths.invoiceID }}>Invoice ID</th>
                  {/* <th style={styles.th}>Payment ID</th> */}
                      <th style={{ ...styles.th, ...styles.columnWidths.customer }}>Customer</th>
                      <th style={{ ...styles.th, ...styles.columnWidths.productName }}>Product Name</th>
                      <th style={{ ...styles.th, ...styles.columnWidths.price }}>Price</th>
                      <th style={{ ...styles.th, ...styles.columnWidths.quantity }}>Quantity</th>
                      <th style={{ ...styles.th, ...styles.columnWidths.totalPrice }}>Total Price</th>
                      <th style={{ ...styles.th, ...styles.columnWidths.operations, ...styles.thLast }}>Operations</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredPayments.map((payment, index) => (
                      <tr key={payment._id} style={{ height: '2rem' }}>
                        <td style={{ ...styles.td, ...styles.columnWidths.no }}> PID_{index + 1}</td>
                        <td style={{ ...styles.td, ...styles.columnWidths.invoiceID }}>{payment._id}</td>
                    {/* <td style={styles.td}>{payment.paymentID}</td> */}
                        <td style={{ ...styles.td, ...styles.columnWidths.customer }}>{payment.cardHolderName}</td>
                        <td style={{ ...styles.td, ...styles.columnWidths.productName }}>{payment.productName}</td>
                        <td style={{ ...styles.td, ...styles.columnWidths.price }}>{payment.price}</td>
                        <td style={{ ...styles.td, ...styles.columnWidths.quantity }}>{payment.quantity}</td>
                        <td style={{ ...styles.td, ...styles.columnWidths.totalPrice }}>{payment.totalPrice}</td>
                        <td style={styles.td}>
                          <div style={styles.operations}>
                            <Link to={`/payments/details/${payment._id}`}>
                              <BsInfoCircle style={{ ...styles.icon, color: '#047857' }} /> {/* Updated color to match the theme */}
                            </Link>
                            <Link to={`/payments/edit/${payment._id}`}>
                              <AiOutlineEdit style={{ ...styles.icon, color: '#d97706' }} />
                            </Link>
                            <Link to={`/payments/delete/${payment._id}`}>
                              <MdOutlineDelete style={{ ...styles.icon, color: '#dc2626' }} />
                            </Link>
                          </div>
                        </td>
                      </tr>
                    ))}
                    {/* Total Price Row */}
                    <tr>
                      <td colSpan="6" style={totalPriceRowStyle.totalPriceLabel}>
                        Total Income :
                      </td>
                      <td style={totalPriceRowStyle.totalPriceValue}>
                        {totalPrice}
                      </td>
                      <td style={totalPriceRowStyle.emptyCell}></td>
                    </tr>
                  </tbody>
                </table>
              </>
            ) : (
              <p style={{ textAlign: 'center', fontSize: '1.25rem', color: '#330D0F', marginTop: '2rem' }}>No results found.</p>
            )}
          </>
        )}
      </div>
    </div>
  );
};

// CSS styles
const styles = {
  page: {
    backgroundColor: '#F1EEDA',
    minHeight: '100vh',
    display: 'flex',
    justifyContent: 'flex-start',
    alignItems: 'flex-start',
    padding: '1rem',
    fontFamily: 'Poppins, sans-serif',
  },
  container: {
    width: '100%',
    maxWidth: '1200px',
    margin: '0 auto',
    fontFamily: 'Poppins, sans-serif',
  },
  header: {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    fontFamily: 'Poppins, sans-serif',
    color: '#330D0F', 
    fontWeight: 'bold',
  },
  title: {
    fontSize: '1.875rem',
    margin: '2rem 0',
    fontFamily: 'Poppins, sans-serif',
  },
  downloadButton: {
    marginBottom: '10px',
    backgroundColor: '#330D0F',
    borderColor: '#330D0F',
    color: '#F1EEDA', // Text color
    padding: '0.5rem 1rem',
    fontSize: '0.88rem',
    fontWeight: 'bold',
    borderRadius: '0.25rem',
    cursor: 'pointer',
    border: '2px solid #330D0F',
    fontFamily: 'Poppins, sans-serif',
    transition: 'background-color 0.3s, border-color 0.3s',
  },
  downloadButtonHover: {
    backgroundColor: '#4a1a1b', // Darker shade for hover
    borderColor: '#4a1a1b',
  },
  addIcon: {
    fontSize: '2rem',
    fontFamily: 'Poppins, sans-serif',
  },
  searchContainer: {
    display: 'flex',
    justifyContent: 'flex-end',
    alignItems: 'center',
    marginBottom: '1rem',
  },
  searchInput: {
    width: '300px',
    padding: '0.5rem',
    fontSize: '0.8rem',
    borderRadius: '0.25rem',
    border: '3px solid #330D0F',
    fontFamily: 'Poppins, sans-serif',
  },
  searchButton: {
    marginLeft: '0.5rem',
    padding: '0.5rem 1rem',
    fontSize: '0.88rem',
    fontWeight: 'bold',
    color: '#FFFFFF',
    backgroundColor: '#330D0F',
    border: '2px solid #330D0F',
    borderRadius: '0.25rem',
    cursor: 'pointer',
    fontFamily: 'Poppins, sans-serif',
  },
  table: {
    width: '100%',
    borderSpacing: '0.5rem',
    fontFamily: 'Poppins, sans-serif',
    tableLayout: 'fixed', // Ensures columns are fixed in width
  },
  th: {
    borderTop: '3px solid #330D0F',
    borderBottom: '3px solid #330D0F',
    borderLeft: '3px solid #330D0F',
    borderRight: '3px solid #F1EEDA',
    backgroundColor: '#4A1416',
    color: '#FFFFFF',
    height: '3rem',
    fontFamily: 'Poppins, sans-serif',
    overflow: 'hidden', // Hide overflow
    whiteSpace: 'nowrap', // Prevent text from wrapping
    textOverflow: 'ellipsis', // Add ellipsis if content is too long
  },
  columnWidths: {
    no: { width: '8%' },
    invoiceID: { width: '17%' },
    customer: { width: '15%' },
    productName: { width: '10%' },
    price: { width: '10%' },
    quantity: { width: '7%' },
    totalPrice: { width: '8%' },
    operations: { width: '10%' },
  },
  thLast: {
    borderRight: '3px solid #330D0F',
    fontFamily: 'Poppins, sans-serif',
  },
  td: {
    border: '3px solid #330D0F',
    height: '2.8rem',
    textAlign: 'center',
    fontFamily: 'Poppins, sans-serif',
    wordWrap: 'break-word', // Break long words to fit within the cell
    overflow: 'hidden', // Hide overflow
    textOverflow: 'ellipsis', // Add ellipsis if content is too long
  },
  operations: {
    display: 'flex',
    justifyContent: 'center',
    gap: '1rem',
    fontFamily: 'Poppins, sans-serif',
  },
  icon: {
    fontSize: '1.5rem',
    fontFamily: 'Poppins, sans-serif',
  },
};

const totalPriceRowStyle = {
  totalPriceLabel: {
    border: '3px solid #330D0F',
    borderRadius: '0.25rem',
    textAlign: 'right',
    fontWeight: 'bold',
    padding: '0.75rem',
    backgroundColor: '#330D0F',
    fontFamily: 'Poppins, sans-serif',
    color: '#FFFFFF',
  },
  totalPriceValue: {
    border: '3px solid #330D0F',
    borderRadius: '0.25rem',
    textAlign: 'center',
    backgroundColor: '#330D0F',
    padding: '0.75rem',
    fontWeight: 'bold',
    fontFamily: 'Poppins, sans-serif',
    color: '#FFFFFF',
  },
  emptyCell: {
    border: '3px solid #330D0F',
    borderRadius: '0.25rem',
    padding: '0.75rem',
    fontFamily: 'Poppins, sans-serif',
  },
};



export default PaymentDashboard;
